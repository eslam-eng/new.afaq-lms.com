<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use App\Http\Controllers\Traits\CalculateCourseCompletion;
use App\Models\Answer;
use App\Models\Country;
use App\Models\Course;
use App\Models\CourseQuestionaireUserAnswar;
use App\Models\CourseQuize;
use App\Models\CourseQuizeScore;
use App\Models\CourseVideoScore;
use App\Models\QuestionAnswer;
use App\Models\Review;
use App\Models\UsersCourse;
use App\Models\ZoomMeeting;
use Illuminate\Http\Request;

class OneCourseController extends Controller
{

    use CalculateCourseCompletion;


    public function show($courses_id)
    {
        $courses_id =  \request()->segment(3);
        $oneCourse = Course::withoutGlobalScopes()->where('id',$courses_id)->first();

        if ($oneCourse) {
            $oneCourse->load(['category', 'instructor', 'course_instructor', 'media', 'course_Hosted_accreditations', 'course_Cooperated_accreditations', 'course_accreditations', 'course_target']);

            $related_courses = Course::where('category_id', $oneCourse->category_id)->where('id', '!=', $oneCourse->id)->latest()->take(3)->get();

            if (count($related_courses) < 2) {
                $related_courses = Course::where('id', '!=', $oneCourse->id)->where('show_for_all', 1)->inRandomOrder()->take(3)->get();
            }
        } else {
            return redirect()->back();
        }
        // dd($oneCourse->toArray());
        return view('frontend.oneCoursePage.index', compact('oneCourse', 'related_courses'));
    }

    public function showNew($courses_id)
    {
        $courses_id =  \request()->segment(3);
        $oneCourse = Course::withoutGlobalScopes()->find($courses_id);
        $countries = Country::whereIn('country_code', ['SA', 'EG'])->with('cities')->get();

        if ($oneCourse) {

            session()->push('recently_viewed', $oneCourse->id);

            $oneCourse->load([
                'category', 'instructor',
                'course_instructor', 'media', 'course_Hosted_accreditations',
                'course_Cooperated_accreditations', 'course_accreditations',
                'course_target', 'sponsors','organizers'
            ]);

            $related_courses = Course::where('category_id', $oneCourse->category_id)
                ->where('id', '!=', $oneCourse->id)
                ->where('status',1)
                ->where('show_for_all',1)
                ->latest()->take(3)->get();

            if (count($related_courses) < 2) {
                $related_courses = Course::where('id', '!=', $oneCourse->id)->inRandomOrder()->take(3)->get();
            }
is_completed
        } else {
            return redirect()->back();
        }
        // dd($oneCourse->toArray());
        return view('onecourseindex', compact('oneCourse', 'related_courses', 'countries'));
    }

    public function enrol_course($course_id)
    {
        $course_id =  \request()->segment(3);
        return redirect()->route('one-courses', [app()->getLocale(), $course_id])->with('message', 'Enrolled Successfully');
    }

    public function quize(Request $request)
    {
        $quize = CourseQuize::where('id', $request->quize_id)->with('exam_title', 'exam_title.questions', 'exam_title.questions.bank_answer')->first();

        if ($quize) {
            return view('frontend.quizes', compact('quize'));
        } else {
            abort(404);
        }
    }

    public function quizeAnswar(Request $request)
    {
        try {
            // Store User answers
            $correct_answars = 0;
            foreach ($request->questions as $question) {
                if (isset($question['answer_id'])) {
                    Answer::create([
                        'user_id' => auth()->user()->id,
                        'question_id' => $question['question_id'],
                        'exams_title_id' => $question['exams_title_id'],
                        'answer_id' => $question['answer_id'],
                        'quize_id' => $request->quize_id
                    ]);

                    if (QuestionAnswer::where('id', $question['answer_id'])->where('question_banks_id', $question['question_id'])->where('correct_answer', 1)->exists()) {
                        $correct_answars += 1;
                    }
                }
            }

            // Store User Score in quize
            $quize = CourseQuize::find($request->quize_id);
            $score_percentage = ($correct_answars / $quize->exam_title->questions->count()) * 100;
            $old_score = CourseQuizeScore::where('course_id', $quize->course_id)
                ->where('quize_id', $quize->id)
                ->where('user_id', auth()->user()->id)->first();
            if ($old_score) {
                $old_score->update([
                    'score_percentage' => $score_percentage,
                    'success' => ($score_percentage >= $quize->success_percentage) ? 1 : 0,
                    'repeat_times' => $old_score->repeat_times + 1
                ]);
            } else {
                CourseQuizeScore::create([
                    'course_id' => $quize->course_id,
                    'quize_id' => $quize->id,
                    'user_id' => auth()->user()->id,
                    'score_percentage' => $score_percentage,
                    'success' => ($score_percentage >= $quize->success_percentage) ? 1 : 0,
                    'repeat_times' => 1
                ]);
            }


            // Add User Score precentage to User Course
            $this->updateCourseCompletion($quize->course_id, auth()->user()->id);

            return redirect()->route('one-course-content', ['course_id' => $quize->course_id, 'section_id' => $quize->section_id, 'locale' => app()->getLocale()]);
        } catch (\Throwable $th) {
            //throw $th;
        }
    }

    public function content(Request $request)
    {
        $oneCourse = Course::withoutGlobalScopes()->find($request->course_id);
        $lecture_id = $request->lecture_id;
        $section_id = $request->section_id;
        $user_questionaire_before= CourseQuestionaireUserAnswar::where('course_id', $request->course_id )->where('user_id' , auth()->user()->id)->exists();


        if ($oneCourse) {
            $oneCourse->load(['questionaire.questions.answars', 'category', 'instructor', 'course_instructor', 'media', 'course_Hosted_accreditations', 'course_Cooperated_accreditations', 'course_accreditations', 'course_target']);
        }

        // dd($oneCourse->questionaire->questions[1]->answars);

        // return $oneCourse->toArray();
        return view('frontend.course-content.index', compact('oneCourse', 'lecture_id', 'section_id' , 'user_questionaire_before'));
    }

    public function videoResult(Request $request)
    {
        $data = $request->except('_token');

        $course_video_score = CourseVideoScore::where('user_id', auth()->user()->id)
            ->where('lecture_id', $request->lecture_id)
            ->where('course_id', $request->course_id)->first();

        if ($course_video_score) {
            $data['score_percentage'] = (isset($data['score_percentage']) && $data['score_percentage'] > $course_video_score->score_percentage) ? ($data['score_percentage'] > 100 ? 100 : $data['score_percentage']) : $course_video_score->score_percentage;
            $course_video_score->update($data);
        } else {
            $data['user_id'] = auth()->user()->id;
            $course_video_score = CourseVideoScore::create($data);
        }

        // Add User Score precentage to User Course
        $this->updateCourseCompletion($course_video_score->course_id, auth()->user()->id);

        return $course_video_score;
    }

    public function questionaire_result(Request $request)
    {
    
        $user_questionaire_before= CourseQuestionaireUserAnswar::where('course_id', $request->course_id )->where('user_id' , auth()->user()->id)->exists();
        if($user_questionaire_before){
            return back()->with('failed', 'created_before');

        }else{
            foreach ($request->answer as $question_id => $answer_name) {
                // if ($value['type'] == 'text') {
                //     $data['answar_text'] = $value['answer_id'];
                //     $data['course_questionaire_question_answar_id'] = null;
                // } elseif ($value['type'] == 'true_false') {
                //     $data['answar_text'] = (string)$value['answer_id'];
                //     $data['course_questionaire_question_answar_id'] = null;
                // } else {
                //     $data['answar_text'] = null;
                //     $data['course_questionaire_question_answar_id'] = $value['answer_id'];
                // }

                $data['user_id'] = auth()->user()->id;
                $data['course_id'] = $request->course_id;
                $data['course_questionaire_id'] = $request->course_questionaire_id;
                $data['course_questionaire_question_id'] = $question_id;
                $data['answar_text'] = $answer_name[0];
                $data['course_questionaire_question_answar_id'] = null;

                CourseQuestionaireUserAnswar::firstOrCreate($data);
                return back()->with('success', 'done');
            
            }
        }
        

        // $review['user_id'] = auth()->user()->id;
        // $review['course_id'] = $request->course_id;
        // $review['rate'] = $request->rating;
        // $review['review'] = $request->review;
        // Review::firstOrCreate($review);


    }

    public function zoomViewer(Request $request){
        $meeting_number = $request->meeting_number;
        $zoom = ZoomMeeting::where('meeting_id',$meeting_number)->first();
        return view('frontend.course-content.single-zoom',compact('meeting_number','zoom'));
    }
}
